generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @map("user_id") @db.Char(21)
  password       String? @map("password")
  fullname       String? @map("full_name")
  lastname       String? @map("last_name")
  firstname      String  @map("first_name")
  email          String  @unique @map("email")
  profilePicture String? @map("profile_picture")
  phone          String? @map("phone") @db.Char(13)

  providers Provider[]
  sessions  UserSession[]

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user")
}

model Provider {
  id                  String         @id @map("provider_id") @db.Char(21)
  name                Json?          @map("name")
  raw                 Json           @map("_raw")
  json                Json           @map("_json")
  emails              Json?          @map("emails")
  photos              Json?          @map("photos")
  username            String?        @map("username")
  provider            String         @map("provider")
  status              ProviderStatus @default(Connected)
  displayName         String         @map("display_name")
  lastStatusChangedAt DateTime?      @map("last_status_changed_at")
  userId              String         @map("user_id") @db.Char(21)
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, id])
  @@index([userId, id])
  @@map("provider")
}

model UserSession {
  id             String    @id @map("session_id") @db.Char(21)
  provider       String    @map("provider")
  codeExpiration DateTime? @map("code_expiration")
  code           String?   @map("code") @db.Char(32)
  refreshToken   String    @unique @map("refresh_token")
  userId         String    @map("user_id") @db.Char(21)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  revoked   Boolean?  @default(false)
  revokedAt DateTime? @map("revoked_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@unique([userId, id])
  @@unique([id, refreshToken])
  @@unique([userId, refreshToken])
  @@index([userId, id])
  @@index([id, refreshToken])
  @@index([userId, refreshToken])
  @@map("user_session")
}

enum ProviderStatus {
  Connected
  Disconnected
}
